generator client {
  provider = "prisma-client-js"
  previewFeatures = ["clientExtensions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model business_organization {
  id                 String               @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name               String               @db.VarChar(255)
  user_id            String               @db.Uuid
  created_at         DateTime             @default(now()) @db.Timestamp(6)
  updated_at         DateTime             @default(now()) @db.Timestamp(6)
  user               user                 @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  environmental_data environmental_data[]
  environmental_goal environmental_goal[]
  suggestion         suggestion[]
}

model environmental_data {
  id                       String                @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  business_organization_id String                @db.Uuid
  data_type                String                @db.VarChar(50)
  value                    Int
  date                     DateTime              @db.Date
  created_at               DateTime              @default(now()) @db.Timestamp(6)
  updated_at               DateTime              @default(now()) @db.Timestamp(6)
  business_organization    business_organization @relation(fields: [business_organization_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model environmental_goal {
  id                       String                @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  business_organization_id String                @db.Uuid
  goal_type                String                @db.VarChar(50)
  target_value             Int
  current_value            Int
  created_at               DateTime              @default(now()) @db.Timestamp(6)
  updated_at               DateTime              @default(now()) @db.Timestamp(6)
  business_organization    business_organization @relation(fields: [business_organization_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model resource {
  id            String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  title         String   @db.VarChar(255)
  url           String   @db.VarChar(255)
  resource_type String   @db.VarChar(50)
  created_at    DateTime @default(now()) @db.Timestamp(6)
  updated_at    DateTime @default(now()) @db.Timestamp(6)
}

model suggestion {
  id                       String                @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id                  String                @db.Uuid
  business_organization_id String                @db.Uuid
  suggestion_type          String                @db.VarChar(50)
  description              String
  created_at               DateTime              @default(now()) @db.Timestamp(6)
  updated_at               DateTime              @default(now()) @db.Timestamp(6)
  business_organization    business_organization @relation(fields: [business_organization_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user                     user                  @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model user {
  id                    String                  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email                 String                  @unique @db.VarChar(255)
  firstName             String?                 @db.VarChar(255)
  lastName              String?                 @db.VarChar(255)
  roq_user_id           String                  @db.VarChar(255)
  tenant_id             String                  @db.VarChar(255)
  business_organization business_organization[]
  suggestion            suggestion[]
}
